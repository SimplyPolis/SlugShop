Metadata-Version: 2.1
Name: Async-OAuthlib
Version: 0.0.9
Summary: OAuthlib authentication support for Aiohttp.
Home-page: https://github.com/thec0sm0s/Async-OAuthlib
Author: â–¡ | The Cosmos
Author-email: deepakrajko14@gmail.com
License: ISC
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Requires-Python: >=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*
Requires-Dist: oauthlib (>=3.0.0)
Requires-Dist: aiohttp
Requires-Dist: requests
Provides-Extra: rsa
Requires-Dist: oauthlib[signedtoken] (>=3.0.0) ; extra == 'rsa'

Async-OAuthlib
==============

This project provides first-class OAuth library support for `Aiohttp <https://github.com/aio-libs/aiohttp>`_.

Installation
-------------

To install requests and async-oauthlib you can use pip:

.. code-block:: bash

    $ pip install requests Async-OAuthlib


The OAuth 1 workflow
--------------------

OAuth 1 can seem overly complicated and it sure has its quirks. Luckily,
async_oauthlib hides most of these and let you focus at the task at hand.

Accessing protected resources using async_oauthlib is as simple as:

.. code-block:: pycon

    >>> from async_oauthlib import OAuth1Session
    >>> twitter = OAuth1Session('client_key',
                                client_secret='client_secret',
                                resource_owner_key='resource_owner_key',
                                resource_owner_secret='resource_owner_secret')
    >>> url = 'https://api.twitter.com/1/account/settings.json'
    >>> r = twitter.get(url)

Before accessing resources you will need to obtain a few credentials from your
provider (e.g. Twitter) and authorization from the user for whom you wish to
retrieve resources for. You can read all about this in the full
`OAuth 1 workflow guide on RTD <https://requests-oauthlib.readthedocs.io/en/latest/oauth1_workflow.html>`_.

The OAuth 2 workflow
--------------------

OAuth 2 is generally simpler than OAuth 1 but comes in more flavours. The most
common being the Authorization Code Grant, also known as the WebApplication
flow.

Fetching a protected resource after obtaining an access token can be extremely
simple. However, before accessing resources you will need to obtain a few
credentials from your provider (e.g. Google) and authorization from the user
for whom you wish to retrieve resources for. You can read all about this in the
full `OAuth 2 workflow guide on RTD <https://requests-oauthlib.readthedocs.io/en/latest/oauth2_workflow.html>`_.

.. code-block:: pycon

    >>> from async_oauthlib import OAuth2Session
    >>> target = OAuth2Session()
    >>> response = await target.request()


History
-------


