const csso = require('csso')
const csstree = require('css-tree');

// var fs = require('fs');
// fs.readFile('/tmp/search.css', (err, buf) => {
//   let css = buf.toString()
//   const minifiedCss = csso.minify(css).css
//   console.log(minifiedCss);
// });

// let css = `
// @keyframes progress-bar-stripes {
//     0% {
//         background-position: 40px 0
//     }
//     to {
//         background-position: 0 0
//     }
// }
// @keyframes progress-bar-stripes {
//     0% {
//         background-position: 40px 0
//     }
//     to {
//         background-position: 0 0
//     }
// }
//
// .segment {
//   height: 3em;
//   -webkit-animation: segment-spin 0.6s linear;
//           animation: segment-spin 0.6s linear;
// }
//
// `
let css = `
@keyframes RotateSlot {
  3% { margin-top: -2em }
  from { transform: rotate(0deg)}
}

@media (min-device-width: 768px) {
  .OtherSelector {
    font-size: 4px;
  }
}
.SomeSelector {
  font-size: 4px;
}

`

// const ast = csso.minify(css)
const ast = csstree.parse(css)
// csstree.walk(ast, function(node) {
//   console.log(node.type, csstree.generate(node));
// });

// let insideKeyframeRule = false
// csstree.walk(ast, {
//   // visit: 'Rule',
//   enter: (node, item, list) => {
//     // console.log(node.type);
//     if (node.type === 'Atrule') {
//       // console.log('   ATRULE', csstree.keyword(node.name).basename);
//       if (csstree.keyword(node.name).basename === 'keyframes') {
//         insideKeyframeRule = true
//       } else {
//         insideKeyframeRule = false
//       }
//     }
//     if (node.type === 'Rule') {
//       console.log('  ', insideKeyframeRule, csstree.generate(node))
//       // console.log(item.prev);
//     }
//   }
// })


csstree.walk(ast, {
  visit: 'Rule',
  enter: function(node) {
    const inKeyframes = this.atrule && csstree.keyword(this.atrule.name).basename === 'keyframes'
    if (!inKeyframes) {
      console.log('  ', node.type, csstree.generate(node))
    }
  }
})
