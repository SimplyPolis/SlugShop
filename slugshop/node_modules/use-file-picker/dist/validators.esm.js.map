{"version":3,"file":"validators.esm.js","sources":["../src/validators/validatorBase.ts","../src/validators/fileAmountLimitValidator/index.ts","../src/validators/fileSizeValidator/index.ts","../src/validators/imageDimensionsValidator/index.ts","../src/validators/persistentFileAmountLimitValidator/index.ts","../src/validators/FileTypeValidator/index.ts"],"sourcesContent":["import { FileWithPath } from 'file-selector';\nimport {\n  ExtractContentTypeFromConfig,\n  FileErrors,\n  SelectedFiles,\n  SelectedFilesOrErrors,\n  UseFilePickerConfig,\n} from '../interfaces';\n\nexport abstract class Validator<\n  CustomErrors = unknown,\n  ConfigType extends UseFilePickerConfig<CustomErrors> = UseFilePickerConfig<any>\n> {\n  protected invokerHookId: string | undefined;\n\n  /**\n   * This method is called before parsing the selected files. It is called once per selection.\n   * @param config passed to the useFilePicker hook\n   * @param plainFiles files selected by the user\n   */\n  abstract validateBeforeParsing(config: ConfigType, plainFiles: File[]): Promise<void>;\n  /**\n   * This method is called after parsing the selected files. It is called once per every parsed file.\n   * @param config passed to the useFilePicker hook\n   * @param file parsed file selected by the user\n   * @param reader instance that was used to parse the file\n   */\n  abstract validateAfterParsing(config: ConfigType, file: FileWithPath, reader: FileReader): Promise<void>;\n\n  /**\n   * lifecycle method called after user selection (regardless of validation result)\n   */\n  onFilesSelected(\n    _data: SelectedFilesOrErrors<ExtractContentTypeFromConfig<ConfigType>, CustomErrors>\n  ): Promise<void> | void {}\n  /**\n   * lifecycle method called after successful validation\n   */\n  onFilesSuccessfullySelected(_data: SelectedFiles<ExtractContentTypeFromConfig<ConfigType>>): Promise<void> | void {}\n  /**\n   * lifecycle method called after failed validation\n   */\n  onFilesRejected(_data: FileErrors<CustomErrors>): Promise<void> | void {}\n  /**\n   * lifecycle method called after the selection is cleared\n   */\n  onClear(): Promise<void> | void {}\n\n  /**\n   * This method is called when file is removed from the list of selected files.\n   * Invoked only by the useImperativeFilePicker hook\n   * @param _removedFile removed file\n   * @param _removedIndex index of removed file\n   */\n  onFileRemoved(_removedFile: File, _removedIndex: number): Promise<void> | void {}\n}\n","import { FileAmountLimitError, FileAmountLimitConfig, UseFilePickerConfig } from '../../interfaces';\nimport { Validator } from '../validatorBase';\n\nexport default class FileAmountLimitValidator extends Validator {\n  constructor(private limitAmountOfFilesConfig: FileAmountLimitConfig) {\n    super();\n  }\n\n  validateBeforeParsing(_config: UseFilePickerConfig, plainFiles: File[]): Promise<void> {\n    const { min, max } = this.limitAmountOfFilesConfig;\n    if (max && plainFiles.length > max) {\n      return Promise.reject({\n        name: 'FileAmountLimitError',\n        reason: 'MAX_AMOUNT_OF_FILES_EXCEEDED',\n      } as FileAmountLimitError);\n    }\n\n    if (min && plainFiles.length < min) {\n      return Promise.reject({\n        name: 'FileAmountLimitError',\n        reason: 'MIN_AMOUNT_OF_FILES_NOT_REACHED',\n      } as FileAmountLimitError);\n    }\n    return Promise.resolve();\n  }\n  validateAfterParsing(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n","import { FileWithPath } from 'file-selector';\nimport { FileSizeError, FileSizeRestrictions, UseFilePickerConfig } from '../../interfaces';\nimport { Validator } from '../validatorBase';\n\nexport default class FileSizeValidator extends Validator {\n  constructor(private fileSizeRestrictions: FileSizeRestrictions) {\n    super();\n  }\n\n  async validateBeforeParsing(_config: UseFilePickerConfig, plainFiles: File[]): Promise<void> {\n    const { minFileSize, maxFileSize } = this.fileSizeRestrictions;\n\n    if (!minFileSize && !maxFileSize) {\n      return Promise.resolve();\n    }\n\n    const errors = plainFiles\n      .map(file => getFileSizeError({ minFileSize, maxFileSize, file }))\n      .filter(error => !!error) as FileSizeError[];\n\n    return errors.length > 0 ? Promise.reject(errors) : Promise.resolve();\n  }\n  async validateAfterParsing(_config: UseFilePickerConfig, _file: FileWithPath): Promise<void> {\n    return Promise.resolve();\n  }\n}\n\nconst getFileSizeError = ({\n  file,\n  maxFileSize,\n  minFileSize,\n}: {\n  minFileSize: number | undefined;\n  maxFileSize: number | undefined;\n  file: FileWithPath;\n}): FileSizeError | undefined => {\n  if (minFileSize) {\n    const minBytes = minFileSize;\n    if (file.size < minBytes) {\n      return { name: 'FileSizeError', reason: 'FILE_SIZE_TOO_SMALL', causedByFile: file };\n    }\n  }\n  if (maxFileSize) {\n    const maxBytes = maxFileSize;\n    if (file.size > maxBytes) {\n      return { name: 'FileSizeError', reason: 'FILE_SIZE_TOO_LARGE', causedByFile: file };\n    }\n  }\n};\n","import { FileWithPath } from 'file-selector';\nimport { ImageDimensionError, ImageDimensionRestrictionsConfig, UseFilePickerConfig } from '../../interfaces';\nimport { Validator } from '../validatorBase';\n\nexport default class ImageDimensionsValidator extends Validator {\n  constructor(private imageSizeRestrictions: ImageDimensionRestrictionsConfig) {\n    super();\n  }\n\n  validateBeforeParsing(): Promise<void> {\n    return Promise.resolve();\n  }\n  validateAfterParsing(config: UseFilePickerConfig, file: FileWithPath, reader: FileReader): Promise<void> {\n    const { readAs } = config;\n    if (readAs === 'DataURL' && this.imageSizeRestrictions && isImage(file.type)) {\n      return checkImageDimensions(file, reader.result as string, this.imageSizeRestrictions);\n    }\n    return Promise.resolve();\n  }\n}\n\nconst isImage = (fileType: string) => fileType.startsWith('image');\n\nconst checkImageDimensions = (\n  file: FileWithPath,\n  imgDataURL: string,\n  imageSizeRestrictions: ImageDimensionRestrictionsConfig\n) =>\n  new Promise<void>((resolve, reject) => {\n    const img = new Image();\n    let error: ImageDimensionError = {\n      name: 'ImageDimensionError',\n      causedByFile: file,\n      reasons: [],\n    };\n    img.onload = function () {\n      const { maxHeight, maxWidth, minHeight, minWidth } = imageSizeRestrictions;\n      const { width, height } = this as unknown as typeof img;\n\n      if (maxHeight && maxHeight < height) error.reasons.push('IMAGE_HEIGHT_TOO_BIG');\n      if (minHeight && minHeight > height) error.reasons.push('IMAGE_HEIGHT_TOO_SMALL');\n      if (maxWidth && maxWidth < width) error.reasons.push('IMAGE_WIDTH_TOO_BIG');\n      if (minWidth && minWidth > width) error.reasons.push('IMAGE_WIDTH_TOO_SMALL');\n      error.reasons.length ? reject(error) : resolve();\n    };\n    img.onerror = function () {\n      error.reasons.push('IMAGE_NOT_LOADED');\n      reject(error);\n    };\n    img.src = imgDataURL;\n  });\n","import { FileAmountLimitConfig, FileAmountLimitError, UseFilePickerConfig } from '../../interfaces';\nimport { Validator } from '../validatorBase';\n\nclass PersistentFileAmountLimitValidator extends Validator {\n  private previousPlainFiles: File[] = [];\n\n  constructor(private limitFilesConfig: FileAmountLimitConfig) {\n    super();\n  }\n\n  onClear(): void {\n    this.previousPlainFiles = [];\n  }\n\n  onFileRemoved(_removedFile: File, removedIndex: number): void {\n    this.previousPlainFiles.splice(removedIndex, 1);\n  }\n\n  validateBeforeParsing(_config: UseFilePickerConfig, plainFiles: File[]): Promise<void> {\n    const fileAmount = this.previousPlainFiles.length + plainFiles.length;\n    const { min, max } = this.limitFilesConfig;\n    if (max && fileAmount > max) {\n      return Promise.reject({\n        name: 'FileAmountLimitError',\n        reason: 'MAX_AMOUNT_OF_FILES_EXCEEDED',\n      } as FileAmountLimitError);\n    }\n\n    if (min && fileAmount < min) {\n      return Promise.reject({\n        name: 'FileAmountLimitError',\n        reason: 'MIN_AMOUNT_OF_FILES_NOT_REACHED',\n      } as FileAmountLimitError);\n    }\n\n    this.previousPlainFiles = [...this.previousPlainFiles, ...plainFiles];\n\n    return Promise.resolve();\n  }\n\n  validateAfterParsing(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n\nexport default PersistentFileAmountLimitValidator;\n","import { FileWithPath, UseFilePickerConfig } from '../../interfaces';\nimport { Validator } from '../validatorBase';\n\nexport default class FileTypeValidator extends Validator {\n  constructor(private readonly acceptedFileExtensions: string[]) {\n    super();\n  }\n\n  validateBeforeParsing(_config: UseFilePickerConfig<any>, plainFiles: File[]): Promise<void> {\n    const fileExtensionErrors = plainFiles.reduce<{ name: string; reason: string; causedByFile: File }[]>(\n      (errors, currentFile) => {\n        const fileExtension = currentFile.name.split('.').pop();\n        if (!fileExtension) {\n          return [\n            ...errors,\n            {\n              name: 'FileTypeError',\n              reason: 'FILE_EXTENSION_NOT_FOUND',\n              causedByFile: currentFile,\n            },\n          ];\n        }\n        if (!this.acceptedFileExtensions.includes(fileExtension)) {\n          return [\n            ...errors,\n            {\n              name: 'FileTypeError',\n              reason: 'FILE_TYPE_NOT_ACCEPTED',\n              causedByFile: currentFile,\n            },\n          ];\n        }\n\n        return errors;\n      },\n      []\n    );\n\n    return fileExtensionErrors.length > 0 ? Promise.reject(fileExtensionErrors) : Promise.resolve();\n  }\n\n  validateAfterParsing(_config: UseFilePickerConfig<any>, _file: FileWithPath, _reader: FileReader): Promise<void> {\n    return Promise.resolve();\n  }\n}\n"],"names":["Validator","invokerHookId","_proto","prototype","onFilesSelected","_data","onFilesSuccessfullySelected","onFilesRejected","onClear","onFileRemoved","_removedFile","_removedIndex","FileAmountLimitValidator","_Validator","_inheritsLoose","limitAmountOfFilesConfig","_this","call","validateBeforeParsing","_config","plainFiles","_this$limitAmountOfFi","min","max","length","Promise","reject","name","reason","resolve","validateAfterParsing","FileSizeValidator","fileSizeRestrictions","_validateBeforeParsing","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this$fileSizeRestric","minFileSize","maxFileSize","errors","wrap","_callee$","_context","prev","next","abrupt","map","file","getFileSizeError","filter","error","stop","_x","_x2","apply","arguments","_validateAfterParsing","_callee2","_file","_callee2$","_context2","_x3","_x4","_ref","minBytes","size","causedByFile","maxBytes","ImageDimensionsValidator","imageSizeRestrictions","config","reader","readAs","isImage","type","checkImageDimensions","result","fileType","startsWith","imgDataURL","img","Image","reasons","onload","maxHeight","maxWidth","minHeight","minWidth","width","height","push","onerror","src","PersistentFileAmountLimitValidator","limitFilesConfig","previousPlainFiles","removedIndex","splice","fileAmount","_this$limitFilesConfi","concat","FileTypeValidator","acceptedFileExtensions","_this2","fileExtensionErrors","reduce","currentFile","fileExtension","split","pop","includes","_reader"],"mappings":"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"}