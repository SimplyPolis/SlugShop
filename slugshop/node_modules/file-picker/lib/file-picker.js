// Generated by CoffeeScript 1.6.3
(function() {
  var FilePicker, MultipleFilePicker, fs, path, unorm, util,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  fs = require('fs');

  path = require('path');

  unorm = require('unorm');

  util = require('util');

  FilePicker = (function() {
    FilePicker.prototype.directory = null;

    FilePicker.prototype.pick_types = null;

    function FilePicker(useUnicodeNormalize) {
      this.useUnicodeNormalize = useUnicodeNormalize != null ? useUnicodeNormalize : false;
      this.readFile = __bind(this.readFile, this);
      this.readDirectory = __bind(this.readDirectory, this);
      this.extract = __bind(this.extract, this);
    }

    FilePicker.prototype.extract = function(callback) {
      var type, types, _i, _len, _ref;
      if (callback == null) {
        throw new Error('require need callback');
      }
      if (this.pick_types != null) {
        types = [];
        _ref = this.pick_types;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          type = _ref[_i];
          types.push(type.toLowerCase());
        }
        this.pick_types = types;
      }
      this.top = this.directory;
      this.files = [];
      this.lastModifiedTime = 0;
      this.readDirectory(this.directory);
      return typeof callback === "function" ? callback(this.files, this.lastModifiedTime) : void 0;
    };

    FilePicker.prototype.readDirectory = function(directory) {
      var item, itemname, list, stat, _i, _len, _results;
      list = fs.readdirSync(directory);
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        itemname = list[_i];
        item = path.resolve(directory, itemname);
        stat = fs.statSync(item);
        if (stat.isDirectory()) {
          _results.push(this.readDirectory(item));
        } else if (stat.isFile()) {
          _results.push(this.readFile(item, stat));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    FilePicker.prototype.readFile = function(file, stat) {
      var extension, mtime, nfc, obj, un;
      extension = path.extname(file).toLowerCase();
      un = this.useUnicodeNormalize;
      nfc = function(str) {
        if (un) {
          return unorm.nfc(str);
        } else {
          return str;
        }
      };
      if ((this.pick_types == null) || this.pick_types.indexOf(extension) > -1) {
        mtime = stat.mtime.getTime();
        obj = {
          realpath: file,
          path: nfc(file).replace(/\\/g, '/'),
          relative_path: nfc(path.relative(this.top, file)).replace(/\\/g, '/'),
          base: nfc(path.dirname(file)).replace(/\\/g, '/'),
          relative_base: nfc(path.relative(this.top, path.dirname(file))).replace(/\\/g, '/'),
          name: nfc(path.basename(file, extension)),
          extension: extension,
          atime: stat.atime.getTime(),
          mtime: stat.mtime.getTime(),
          ctime: stat.ctime.getTime()
        };
        this.files.push(obj);
        if (mtime > this.lastModifiedTime) {
          return this.lastModifiedTime = mtime;
        }
      }
    };

    return FilePicker;

  })();

  MultipleFilePicker = (function() {
    MultipleFilePicker.prototype.directories = null;

    MultipleFilePicker.prototype.pick_types = null;

    function MultipleFilePicker(useUnicodeNormalize) {
      this.useUnicodeNormalize = useUnicodeNormalize != null ? useUnicodeNormalize : false;
      this.extractDirectory = __bind(this.extractDirectory, this);
      this.extract = __bind(this.extract, this);
      this.picker = new FilePicker(this.useUnicodeNormalize);
    }

    MultipleFilePicker.prototype.extract = function(callback) {
      this.callback = callback;
      this.currentDirectory = -1;
      this.maxDirectory = this.directories.length;
      this.files = [];
      this.lastModifiedTime = 0;
      return this.extractDirectory();
    };

    MultipleFilePicker.prototype.extractDirectory = function() {
      var _this = this;
      if (++this.currentDirectory < this.maxDirectory) {
        this.picker.directory = this.directories[this.currentDirectory];
        this.picker.pick_types = this.pick_types;
        return this.picker.extract(function(files, lastModifiedTime) {
          _this.files = _this.files.concat(files);
          if (lastModifiedTime > _this.lastModifiedTime) {
            _this.lastModifiedTime = lastModifiedTime;
          }
          return _this.extractDirectory();
        });
      } else {
        return this.callback(this.files, this.lastModifiedTime);
      }
    };

    return MultipleFilePicker;

  })();

  exports.pick = function() {
    var args, callback, directory, pick_types, picker;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    directory = args[0];
    if (args.length === 3) {
      pick_types = args[1];
      callback = args[2];
    } else {
      callback = args[1];
    }
    if (util.isArray(directory)) {
      picker = new MultipleFilePicker;
      picker.directories = directory;
      picker.pick_types = pick_types;
      return picker.extract(callback);
    } else {
      picker = new FilePicker;
      picker.directory = directory;
      picker.pick_types = pick_types;
      return picker.extract(callback);
    }
  };

  exports.treefy = function(files, json) {
    var current, dir, dirs, f, file, _i, _j, _len, _ref;
    if (json == null) {
      json = {};
    }
    for (f = _i = 0, _ref = files.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; f = 0 <= _ref ? ++_i : --_i) {
      file = files[f];
      dirs = file.relative_base.split('/');
      current = json;
      if (file.relative_base !== '') {
        for (_j = 0, _len = dirs.length; _j < _len; _j++) {
          dir = dirs[_j];
          if (current[dir] == null) {
            current[dir] = {};
          }
          current = current[dir];
        }
      }
      current[file.name] = f;
    }
    return json;
  };

  exports.FilePicker = FilePicker;

  exports.MultipleFilePicker = MultipleFilePicker;

}).call(this);

/*
//@ sourceMappingURL=file-picker.map
*/
